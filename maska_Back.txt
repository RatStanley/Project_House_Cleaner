/*
std::vector<sf::ConvexShape> vector_v2_mask(std::vector<std::vector<sf::Vector2f>> points, std::vector<sf::Vector2f> vert)
{
    sf::ConvexShape maska;
    //maska.setFillColor(sf::Color::Black);
    maska.setFillColor(sf::Color(50,50,50));

    std::vector<sf::ConvexShape> vec;
    points.emplace_back(points[0]); // by bra³o pod uwagê pierwszy punkt

    for(size_t i = 1; i < points.size(); i++)
    {

        size_t idx_first = 0;
        size_t idx_sec = 0;
        bool first = false;
        bool sec = false;
        if(i != points.size()-1)
        {
            for(auto& ver : vert)
            {
                if(points[i-1][0] == ver)
                    first = true;
                else if(points[i-1][1] == ver)
                    sec = true;

            }
        }
        if(points[i].size() == points[i-1].size())
        {
            if(points[i].size() == 2)
            {
            idx_first = 0;
            idx_sec = 0;
            //if(first == true && sec == true)
            //    idx_sec++;
            maska.setFillColor(sf::Color::Yellow);
            }
            else
            {
                idx_first = 1;
                idx_sec = 1;

                maska.setFillColor(sf::Color(100,50,50));
            }

            vec.emplace_back(maska);
        }
        else if(points[i].size() > points[i-1].size())
        {
            maska.setPointCount(4);
            if(pow(points[i-1][0].x - points[i][0].x,2) + pow(points[i-1][0].y - points[i][0].y,2) < pow(points[i-1][0].x - points[i][1].x,2) + pow(points[i-1][0].y - points[i][1].y,2))
            {

                idx_first = 1;
                idx_sec = 0;

                maska.setFillColor(sf::Color::Blue);

            }
            else
            {

                idx_first = 1;
                idx_sec = 0;
                maska.setFillColor(sf::Color::Green);

            }

            vec.emplace_back(maska);
        }
        else if(points[i].size() < points[i-1].size())
        {

            maska.setPointCount(4);

            if(pow(points[i-1][0].x-points[i][0].x,2) + pow(points[i-1][0].y-points[i][0].y,2) > pow(points[i-1][0].x-points[i][1].x,2) + pow(points[i-1][0].y-points[i][1].y,2))
            {

                idx_first = 0;
                idx_sec = 0;
                maska.setFillColor(sf::Color::Red);

            }
            else
            {

                idx_first = 0;
                idx_sec = 1;

                maska.setFillColor(sf::Color::White);

            }

        }

        maska.setPointCount(4);
        maska.setPoint(0,points[i][idx_first]);
        maska.setPoint(1,points[i][points[i].size()-1]);
        maska.setPoint(2,points[i-1][points[i-1].size()-1]);
        maska.setPoint(3,points[i-1][idx_sec]);
        vec.emplace_back(maska);


    }
    return vec;
}
*/